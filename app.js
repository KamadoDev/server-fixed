// ---------------------------
// üîí Secure Express Server (ZAP Friendly & Hardened)
// ---------------------------
const express = require("express");
const mongoose = require("mongoose");
const helmet = require("helmet");
const cors = require("cors");
const rateLimit = require("express-rate-limit");
const mongoSanitize = require("express-mongo-sanitize");
const xss = require("xss-clean");
const hpp = require("hpp");
const cookieParser = require("cookie-parser");
const morgan = require("morgan");
require("dotenv").config();

const app = express();

// ---------------------------
// üì¶ Middleware c∆° b·∫£n
// ---------------------------
app.use(express.json({ limit: "10kb" }));
app.use(cookieParser());
app.use(xss());
app.use(hpp());
app.disable("x-powered-by");
app.disable("etag"); // üõ°Ô∏è T·∫Øt ETag ƒë·ªÉ tr√°nh timestamp leak

// ---------------------------
// üß± Helmet b·∫£o m·∫≠t n√¢ng cao
// ---------------------------
app.use(
  helmet({
    crossOriginEmbedderPolicy: true,
    crossOriginOpenerPolicy: { policy: "same-origin" },
    crossOriginResourcePolicy: { policy: "same-origin" },
    hidePoweredBy: true,
    noSniff: true, // üõ°Ô∏è Ch·ªëng sniff MIME
    frameguard: { action: "deny" }, // üõ°Ô∏è Ch·ªëng clickjacking
    referrerPolicy: { policy: "no-referrer" },
    contentSecurityPolicy: {
      useDefaults: true,
      directives: {
        defaultSrc: ["'self'"],
        scriptSrc: [
          "'self'",
          "https://www.googletagmanager.com",
          "https://ssl.google-analytics.com",
        ],
        styleSrc: ["'self'", "https://fonts.googleapis.com"],
        imgSrc: [
          "'self'",
          "data:",
          `https://res.cloudinary.com/${process.env.CLOUDINARY_NAME}/`,
        ],
        fontSrc: ["'self'", "https://fonts.gstatic.com"],
        connectSrc: [
          "'self'",
          "https://runshop-fixed.netlify.app",
          "https://runshop-admin-fixed.netlify.app",
          "http://localhost:4000",
        ],
        objectSrc: ["'none'"],
        frameAncestors: ["'none'"], // üõ°Ô∏è NgƒÉn nh√∫ng iframe
        baseUri: ["'self'"],
        formAction: ["'self'"],
        upgradeInsecureRequests: [],
      },
    },
    hsts: {
      maxAge: 31536000,
      includeSubDomains: true,
      preload: true,
    },
  })
);

// ---------------------------
// üåê CORS an to√†n
// ---------------------------
const allowedOrigins = [
  "http://localhost:3000",
  "http://localhost:5173",
  "https://runshop-fixed.netlify.app",
  "https://runshop-admin-fixed.netlify.app",
];
app.use(
  cors({
    origin: function (origin, callback) {
      if (!origin || allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        console.warn("‚ùå Blocked CORS request from:", origin);
        callback(new Error("Not allowed by CORS"));
      }
    },
    credentials: true,
  })
);

// üß± Kh√¥ng cache cho API nh·∫°y c·∫£m
app.use((req, res, next) => {
  res.setHeader("Cache-Control", "no-store, no-cache, must-revalidate, proxy-revalidate");
  res.setHeader("Pragma", "no-cache");
  res.setHeader("Expires", "0");
  res.removeHeader("Date"); // üõ°Ô∏è ·∫®n timestamp kh·ªèi header
  next();
});

// ---------------------------
// üß© B·∫£o v·ªá b·ªï sung
// ---------------------------
app.use(mongoSanitize());
app.use(
  rateLimit({
    windowMs: 60 * 1000,
    max: 100,
    message: "Too many requests, please try again later.",
  })
);

// ---------------------------
// üßæ Log (ch·ªâ dev)
// ---------------------------
if (process.env.NODE_ENV !== "production") {
  app.use(morgan("dev"));
}

// ---------------------------
// üì¶ Routes
// ---------------------------
const routes = {
  user: require("./routes/userRoutes"),
  cart: require("./routes/cartRoutes"),
  category: require("./routes/categoriesRoutes"),
  subCategory: require("./routes/subCategoriesRoutes"),
  products: require("./routes/productsRoutes"),
  voucher: require("./routes/voucherRoutes"),
  favorite: require("./routes/favoriteProductRoutes"),
  review: require("./routes/reviewRoutes"),
  order: require("./routes/orderRoutes"),
  slideBanner: require("./routes/slideBannerRoutes"),
  search: require("./routes/searchRoutes"),
  contact: require("./routes/contactRoutes"),
  logoWeb: require("./routes/logoWebRoutes"),
};

for (const [key, route] of Object.entries(routes)) {
  app.use(`/api/${key}`, route);
}

// ---------------------------
// ‚öôÔ∏è X·ª≠ l√Ω l·ªói to√†n c·ª•c
// ---------------------------
app.use((err, req, res, next) => {
  console.error("Error:", err.message);
  res.status(500).json({
    success: false,
    message: "Internal server error",
  });
});

// ---------------------------
// üóÑÔ∏è K·∫øt n·ªëi MongoDB
// ---------------------------
mongoose
  .connect(process.env.CONNECTION_STRING)
  .then(() => {
    console.log("‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB");
    app.listen(process.env.PORT, () => {
      console.log(`üöÄ Server ch·∫°y t·∫°i http://localhost:${process.env.PORT}`);
    });
  })
  .catch((err) => {
    console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err);
  });
